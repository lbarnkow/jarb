final int CHECKSTYLE_VIOLATIONS_THRESHOLD = 0
final String STATS_DIR = 'build/stats'


// TODO: temporary fix to mitigate CVE-2019-9658, should be re-evaluated in the future
// see: https://github.com/gradle/gradle/blob/master/subprojects/code-quality/src/main/groovy/org/gradle/api/plugins/quality/CheckstylePlugin.java#L39
checkstyle.toolVersion = '8.18'


checkstyleMain.doLast {
    checkstyleExportStats(CHECKSTYLE_VIOLATIONS_THRESHOLD, STATS_DIR)
    checkstyleExportReport()
}

def checkstyleExportStats(threshold, statsDir) {
    def count = checkstyleCountViolations('main')

    def schemaVersion = 1
    def label = "checkstyle"
    def message = (count == 0 ? "all good" : "${count} violations")
    def color = (count == 0 ? "success" : "yellow")

    def json = groovy.json.JsonOutput.toJson([schemaVersion: schemaVersion, label: label, message: message, color: color])
    new File(statsDir).mkdirs()
    new File(statsDir, 'stats-checkstyle.json').withWriter('utf-8') {
        writer -> writer.writeLine json
    }

    if (count > threshold) {
        throw new GradleException(
            "Number of checkstyle violations (${count}) " +
            "is higher that the allowed threshold (${threshold})!")
    }
}

def checkstyleCountViolations(sourceset) {
    def xmlFile = file("build/reports/checkstyle/${sourceset}.xml")
    def xml = new groovy.util.XmlSlurper().parseText(xmlFile.text)

    def count = 0
    for (file in xml.file) {
        count += file.error.size()
    }
    return count
}

def checkstyleExportReport() {
    def htmlMain = file('build/reports/checkstyle/main.html').text

    def pattern = java.util.regex.Pattern.compile(".+<body>(.+)</body>.+", java.util.regex.Pattern.DOTALL)
    def matcherMain = pattern.matcher(htmlMain)

    if (matcherMain.matches()) {
        new File('build/reports/checkstyle/report.md').withWriter('utf-8') {
            writer -> 
                writer.writeLine '# Dependency Check Report (Main only)'
                writer.writeLine ""
                writer.writeLine matcherMain.group(1)
        }
    }
}
