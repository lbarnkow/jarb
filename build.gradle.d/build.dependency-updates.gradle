final int OUTDATED_DEPENDENCIES_THRESHOLD = 25
final String STATS_DIR = 'build/stats'

dependencyUpdates {
    revision = 'release'

    resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

}

dependencyUpdates.doLast {
    dependencyUpdatesExportStats(OUTDATED_DEPENDENCIES_THRESHOLD, STATS_DIR)
}

def dependencyUpdatesExportStats(threshold, statsDir) {
    def jsonFile = file('build/dependencyUpdates/report.json')
    def json = new groovy.json.JsonSlurper().parseText(jsonFile.text)

    def count = json.outdated.count
    def schemaVersion = 1
    def label = "dependencies"
    def message = (count == 0 ? "up to date" : "${count} out of date")
    def color = (count == 0 ? "success" : "important")

    json = groovy.json.JsonOutput.toJson([schemaVersion: schemaVersion, label: label, message: message, color: color])
    new File(statsDir).mkdirs()
    new File(statsDir, 'stats-deps.json').withWriter('utf-8') {
        writer -> writer.writeLine json
    }

    if (count > threshold) {
        throw new GradleException(
            "Number of outdated dependencies (${count}) " +
            "is higher that the allowed threshold (${threshold})!")
    }
}
